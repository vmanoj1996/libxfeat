# test/verify_conv2d.py

import torch
import torch.nn.functional as F
import numpy as np
import h5py
import os

def read_h5_to_tensor(filepath: str, dataset_name: str) -> torch.Tensor:
    """Reads a dataset from an HDF5 file and converts it to a PyTorch tensor."""
    with h5py.File(filepath, 'r') as f:
        data = f[dataset_name][()]
    return torch.from_numpy(data.astype(np.float32))

def print_tensor_stats(name: str, tensor: torch.Tensor):
    """Prints the shape, min, max, and mean of a tensor."""
    print(
        f"  - {name:<15} | "
        f"Shape: {str(list(tensor.shape)):<20} | "
        f"Min: {tensor.min().item():>8.4f} | "
        f"Max: {tensor.max().item():>8.4f} | "
        f"Mean: {tensor.mean().item():>8.4f}"
    )

def main():
    print("--- Verifying Conv2D C++ Implementation vs. PyTorch ---")
    test_dir = "./conv_test/"
    
    # --- 1. Load data generated by the C++ test ---
    print(f"\n--- 1. Loading data from '{test_dir}' ---")
    try:
        cpp_input = read_h5_to_tensor(os.path.join(test_dir, "input.h5"), "input")
        cpp_kernel = read_h5_to_tensor(os.path.join(test_dir, "kernel.h5"), "kernel")
        cpp_output = read_h5_to_tensor(os.path.join(test_dir, "output.h5"), "output")
    except FileNotFoundError:
        print("\nERROR: HDF5 files not found.")
        print("Please run the C++ test executable (e.g., ./build/test_conv2d) first to generate them.")
        return
    
    # --- 2. Get convolution parameters from the tensor shapes ---
    out_channels, in_channels, kH, kW = cpp_kernel.shape
    stride = 1
    padding = 1
    
    # --- 2b. Check Data Ranges (NEW) ---
    print("\n--- 2b. Checking data ranges from C++ ---")
    print_tensor_stats("C++ Input", cpp_input)
    print_tensor_stats("C++ Kernel", cpp_kernel)
    print_tensor_stats("C++ Output", cpp_output)

    # --- 3. Perform the convolution using PyTorch ---
    print("\n--- 3. Performing convolution with PyTorch ---")
    # PyTorch's conv2d function requires a batched input (N, C, H, W).
    torch_input = cpp_input.unsqueeze(0)
    
    torch_output = F.conv2d(
        input=torch_input,
        weight=cpp_kernel,
        bias=None,
        stride=(stride, stride),
        padding=(padding, padding)
    )

    # Remove the batch dimension to match the C++ output shape
    torch_output = torch_output.squeeze(0)
    print_tensor_stats("PyTorch Output", torch_output)
    
    # --- 4. Compare the results ---
    print("\n--- 4. Comparing C++ and PyTorch outputs ---")
    if torch_output.shape != cpp_output.shape:
        print(f"FAIL: Shape mismatch! PyTorch: {torch_output.shape}, C++: {cpp_output.shape}")
        return

    # Calculate Mean Absolute Error
    mae = torch.mean(torch.abs(torch_output - cpp_output))
    
    # Check if the error is within an acceptable tolerance
    tolerance = 1e-6
    print(f"Mean Absolute Error: {mae.item():.8f}")
    print(f"Tolerance:           {tolerance}")

    import sys
    if mae.item() < tolerance:
        print("\n✅ Test PASSED!")
        sys.exit(0)  # Success
    else:
        print("\n❌ Test FAILED!")
        diff = torch.abs(torch_output - cpp_output)
        print("\n--- Difference Stats (Abs) ---")
        print_tensor_stats("Difference", diff)
        sys.exit(1)  # Failure


if __name__ == "__main__":
    main()